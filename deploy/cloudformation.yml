Description:  serverless event stack
Parameters:
  AppName:
    Description: lambda default name
    Type: String
    Default: serverless-event
  NRAccountId:
    Description: the newrelic account id
    Type: String
  NRLicenseKey:
    Description: the newrelic account licence key
    Type: String
  ApolloKey:
    Description: the apollo studio account licence key
    Type: String
  ApolloRef:
    Description: the apollo studio account ref
    Type: String
    Default: serverless-event@main
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-access-dynamodb-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt DynamoDB.Arn
                  - !Join ['/', [!GetAtt DynamoDB.Arn, 'index', '*'] ]
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Join ['-', [!Ref AppName, 'table'] ]
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "id"
          KeyType: "HASH"
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['-', [!Ref AppName, 'lambda'] ]
      Runtime: nodejs16.x
      Handler: "newrelic-lambda-wrapper.handler"
      Timeout: 30
      Role: !GetAtt 'LambdaRole.Arn'
      Code:
        ZipFile: '../dist/'
      Environment:
        Variables:
          NEW_RELIC_LAMBDA_HANDLER: src/index.handler
          NEW_RELIC_ACCOUNT_ID: !Ref NRAccountId
          NEW_RELIC_LICENSE_KEY: !Ref NRLicenseKey
          APOLLO_KEY: !Ref ApolloKey
          APOLLO_GRAPH_REF: !Ref ApolloRef
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicNodeJS16X:16
      Tags:
        - Key: application
          Value: !Ref AppName
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Join ['-', [!Ref AppName, 'api-gateway'] ]
      Description: Lambda proxy using quick create
      ProtocolType: HTTP
      Target: !GetAtt LambdaFunction.Arn
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
